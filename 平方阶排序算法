#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;
const int INF = 0x3f3f3f3f;
const int N = 1e5 + 5;

void insertionSort(int* R, int n);
void simpleBubbleSort(int* R, int n);
void BubbleSort(int* R, int n);
void selectSort(int* R, int n);
void shellSort(int* R, int n);

int main()
{
	
}

void insertionSort(int* R, int n)
{
	for (int i = 2; i <= n; i++)
	{
		int k = R[i], j = i - 1;
		while (j >= 1 && R[j] > k)
		{
			R[j + 1] = R[j];
			j--;
		}
		R[j + 1] = k;
	}
}
void simpleBubbleSort(int* R, int n)
{
	for (int bound = n; bound >= 2; bound--)
	{
		for (int i = 1; i < bound; i++)
		{
			if (R[i] > R[i + 1])
			{
				swap(R[i], R[i + 1]);
			}
		}
	}
}
void BubbleSort(int* R, int n)
{
	int bound = n;
	while (bound > 0)
	{
		int t = 0;
		for (int i = 1; i < bound; i++)
		{
			if (R[i] > R[i + 1])
			{
				swap(R[i], R[i + 1]);
				t = i;
			}
		}
		bound = t;
	}
}
void selectSort(int* R, int n)
{
	for (int i = n; i >= 1; i--)
	{
		int max = 1;
		for (int j = 2; j <= i; j++)
		{
			if (R[j] > R[max])max = j;
			swap(R[max], R[i]);
		}
	}
}
void shellSort(int* R, int n)
{
	for (int d = n / 2; d > 0; d /= 2)
	{
		for (int i = d + 1; i <= n; i++)
		{
			int k = R[i], j = i - d;
			while (j > 0 && R[j] > k)
			{
				R[j + d] = R[j];
				j -= d;
			}
			R[j + d] = k;
		}
	}
}
