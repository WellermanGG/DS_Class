//我们称一个字符串的秩为：该字符串长度减去该字符串的最短相等前后缀的长度。若该字符串不存在相等的前后缀，则其秩为0。
//例如：abcabcxabcabc最短相等前后缀为abc，该字符串的秩为10。
//Pororo和小龙玩猜字游戏，Pororo给出一个字符串S，小龙需计算S及S中所有前缀子串的秩之和。请编写程序帮助小龙猜数字。
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
using namespace std;
using ll = long long;
const int N = 1e6 + 5;
char a[N];
ll f[N];

void fail(char* a)               //失败函数
{
    int m = strlen(a);           //获取字符串的长度，下标从0开始
    f[0] = -1;
    for (int j = 1; j <= m - 1; j++)
    {
        ll i = f[j - 1];
        while (a[j] != a[i + 1] && i >= 0)      //跳出循环意味着要么找到h，要么不存在这样的h
        {
            i = f[i];
        }
        if (a[j] == a[i + 1])
        {
            f[j] = i + 1;
        }
        else
            f[j] = -1;
    }
}

int main()
{
    int n; cin >> n;
    cin >> a;
    fail(a);
    for (int i = 0; i < n; i++)
    {
        if (f[i] > 0 && f[f[i]] >= 0)
        {
            f[i] = f[f[i]];            //迭代
        }
    }
    ll ans = 0;
    for (ll i = 0; i < n; i++)
    {
        if (f[i] >= 0)
        {
            ans += (i + 1) - (f[i] + 1);
        }
    }
    cout << ans;
    return 0;
}

